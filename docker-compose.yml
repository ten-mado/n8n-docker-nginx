version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        N8N_VERSION: 1.53.2
    ports:
      - 5678:5678
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`${N8N_HOST}`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls.certresolver=mytlschallenge
      - traefik.http.routers.app.tls=true
      - traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=100000000
      - traefik.backend.buffering.maxRequestBodyBytes=128000000
    # 環境変数
    environment:
      - N8N_PROTOCOL=https
      - N8N_LOG_LEVEL=debug
      - N8N_PAYLOAD_SIZE_MAX=100
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - N8N_HOST
      - WEBHOOK_URL
      - N8N_EDITOR_BASE_URL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - GENERIC_TIMEZONE
    tty: true
    volumes:
      - ./.n8n:/home/node/.n8n
      - ./n8n-nodes-starter/dist:/home/node/.n8n/custom
    depends_on:
      postgres:
        condition: service_healthy
    # 実行ユーザーはホストマシンと同一であったほうが都合が良い時もあるので、適宜変えて下さい
    # user: "1000:1000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
  # Postgresのコンテナがホストマシンのボリュームを読み書きする時に権限の不一致等のエラーが出るのを回避するためにchownを実行するための一時的なコンテナ
  postgres-init:
    image: postgres:16
    volumes:
      - ./db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data
        chmod +x /docker-entrypoint-initdb.d/init-data.sh
  postgres:
    depends_on:
      postgres-init:
        condition: service_completed_successfully
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - ./db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}' ]
      interval: 5s
      timeout: 5s
      retries: 10
  traefik:
    image: 'traefik'
    command:
      - --log.level=DEBUG
      - --api=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true
      - --certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}
      - --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./traefik/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      app:
        condition: service_started
